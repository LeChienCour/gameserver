name: Deploy Game Server

on:
  push:
    branches: [main]
  workflow_dispatch:

# Add permissions block
permissions:
  contents: read
  pull-requests: write
  issues: write
  id-token: write

jobs:
  terraform_deploy:
    runs-on: ubuntu-latest
    outputs:
      instance_ip: ${{ steps.terraform_apply.outputs.instance_ip }}
      user_pool_id: ${{ steps.terraform_apply.outputs.user_pool_client_id }}
    steps:
      - uses: actions/checkout@v4.1.1
      
      - uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: 1.12.1
      
      - name: Terraform Init
        id: init
        run: |
          $TERRAFORM_CLI_PATH/terraform init 2>&1 | tee init.log
          echo "::group::Terraform Init Log"
          cat init.log
          echo "::endgroup::"
      
      - name: Terraform Plan
        id: plan
        run: |
          $TERRAFORM_CLI_PATH/terraform plan -detailed-exitcode -out=tfplan 2>&1 | tee plan.log
          echo "::group::Terraform Plan Log"
          cat plan.log
          echo "::endgroup::"
      
      - name: Terraform Apply
        id: terraform_apply
        run: |
          $TERRAFORM_CLI_PATH/terraform apply -auto-approve tfplan 2>&1 | tee apply.log
          echo "::group::Terraform Apply Log"
          cat apply.log
          echo "::endgroup::"
          
          # Extract and set outputs
          echo "instance_ip=$($TERRAFORM_CLI_PATH/terraform output -raw instance_ip)" >> $GITHUB_OUTPUT
          echo "user_pool_client_id=$($TERRAFORM_CLI_PATH/terraform output -raw user_pool_client_id)" >> $GITHUB_OUTPUT

  build_mod:
    needs: [terraform_deploy]
    runs-on: ubuntu-latest
    outputs:
      mod_path: ${{ github.workspace }}/mod_source/build/libs/voicechatmod-1.0.jar
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          repository: LeChienCour/VoiceChatMod
          path: ./mod_source
      
      - uses: actions/setup-java@v3.13.0
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: gradle
      
      - name: Build and Configure Mod
        id: build
        run: |
          echo "::group::Mod Configuration"
          chmod +x ./mod_source/gradlew
          cd ./mod_source/src/main/resources/config
          echo "Updating client ID in config..."
          sed -i "s/YOUR_CLIENT_ID/${{ needs.terraform_deploy.outputs.user_pool_id }}/g" voicechatmod-common.toml
          cat voicechatmod-common.toml
          cd ../../../
          echo "::endgroup::"
          
          echo "::group::Gradle Build"
          ./gradlew build --info
          echo "::endgroup::"
          
          echo "::group::Build Artifacts"
          ls -la build/libs/
          echo "::endgroup::"
      
      - uses: actions/upload-artifact@v4
        with:
          name: mod-jar
          path: ./mod_source/build/libs/*.jar
          if-no-files-found: error

  deploy_mod:
    needs: [build_mod, terraform_deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Wait for EC2 Instance
        run: |
          echo "Waiting 60 seconds for EC2 instance to initialize..."
          sleep 60
      
      - name: Deploy and Configure Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ needs.terraform_deploy.outputs.instance_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            {
              echo "::group::Server Setup"
              sudo mkdir -p /opt/minecraft/server
              sudo chown -R ubuntu:ubuntu /opt/minecraft
              cd /opt/minecraft/server
              
              echo "Downloading NeoForge..."
              wget -q https://maven.neoforged.net/releases/net/neoforged/neoforge/1.21.1/neoforge-1.21.1-installer.jar
              
              echo "Installing NeoForge..."
              java -jar neoforge-1.21.1-installer.jar --installServer
              
              echo "Creating mods directory..."
              mkdir -p mods
              echo "::endgroup::"
              
              echo "::group::Mod Deployment"
              echo "Downloading mod from S3..."
              aws s3 cp s3://${{ secrets.MOD_ARTIFACT_BUCKET }}/${{ needs.build_mod.outputs.mod_path }} mods/
              echo "Mod files in directory:"
              ls -la mods/
              echo "::endgroup::"
              
              echo "::group::Service Configuration"
              echo "Enabling and starting Minecraft service..."
              sudo systemctl enable minecraft.service
              sudo systemctl start minecraft.service
              echo "Service status:"
              sudo systemctl status minecraft.service
              echo "::endgroup::"
            } 2>&1 | tee deployment.log

  verify:
    needs: [deploy_mod, terraform_deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Verify Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ needs.terraform_deploy.outputs.instance_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            {
              echo "::group::Service Status"
              systemctl status minecraft.service
              echo "::endgroup::"
              
              echo "::group::Mod Installation"
              echo "Installed mods:"
              ls -la /opt/minecraft/server/mods/
              echo "::endgroup::"
              
              echo "::group::Server Logs"
              echo "Last 50 lines of server log:"
              tail -n 50 /opt/minecraft/server/logs/latest.log
              echo "::endgroup::"
              
              echo "::group::System Resources"
              echo "Memory usage:"
              free -h
              echo "Disk usage:"
              df -h
              echo "CPU load:"
              uptime
              echo "::endgroup::"
            } 2>&1 | tee verification.log

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-summary
          path: verification.log