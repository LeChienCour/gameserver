# Main production deployment workflow for the Minecraft game server
# This workflow is triggered on pushes to main branch or manual dispatch
name: Deploy Game Server

on:
  push:
    branches: [main]
    # Only trigger on changes to relevant files
    paths:
      - '.github/scripts/**'      # Deployment scripts
      - '.github/workflows/deploy-game-server.yaml'  # This workflow
      - 'terraform/**'            # Infrastructure code
      - 'userdata.sh'            # Instance initialization
  workflow_dispatch:  # Allow manual triggers
    inputs:
      stage:
        description: 'Deployment stage (dev/staging/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

# Set minimal required permissions for security
permissions:
  contents: read    # For repository checkout
  id-token: write  # For AWS authentication
  deployments: write # For deployment status

jobs:
  # First job: Deploy infrastructure using Terraform
  terraform_deploy:
    runs-on: ubuntu-latest
    outputs:
      instance_ip: ${{ steps.get_ip.outputs.instance_ip }}  # Pass IP to next job
    steps:
      - uses: actions/checkout@v4.1.1  # Get repository code

      # Configure AWS credentials for deployment
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Install Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: 1.12.1

      # Verify all required secrets are available
      - name: Validate Required Secrets
        env:
          TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
          TF_LOCK_TABLE: ${{ secrets.TF_LOCK_TABLE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          if [ -z "$TF_STATE_BUCKET" ]; then
            echo "::error::TF_STATE_BUCKET secret is not set"
            exit 1
          fi
          if [ -z "$TF_LOCK_TABLE" ]; then
            echo "::error::TF_LOCK_TABLE secret is not set"
            exit 1
          fi
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "::error::AWS_ACCESS_KEY_ID secret is not set"
            exit 1
          fi
          if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
            echo "::error::AWS_SECRET_ACCESS_KEY secret is not set"
            exit 1
          fi
          echo "All required secrets are set"

      # Configure Terraform backend for state management
      - name: Determine Stage
        id: stage
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            STAGE="${{ github.event.inputs.stage }}"
          else
            STAGE="dev"  # Default to dev for push events
          fi
          echo "stage=$STAGE" >> $GITHUB_OUTPUT
          echo "Deploying to stage: $STAGE"

      - name: Create Backend Config File
        env:
          TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
          TF_LOCK_TABLE: ${{ secrets.TF_LOCK_TABLE }}
          STAGE: ${{ steps.stage.outputs.stage }}
        run: |
          cat > backend.hcl << EOF
          bucket         = "$TF_STATE_BUCKET"
          key            = "terraform.tfstate"
          region         = "us-east-1"
          dynamodb_table = "$TF_LOCK_TABLE"
          encrypt        = true
          EOF
          
          echo "Generated backend configuration:"
          cat backend.hcl

      # Initialize Terraform with backend config
      - name: Terraform Init
        id: init
        run: |
          # Set logging to show only errors
          export TF_LOG=ERROR
          
          echo "Initializing Terraform..."
          terraform init -backend-config=backend.hcl -reconfigure -input=false 2>&1 | tee init.log
          INIT_EXIT_CODE=${PIPESTATUS[0]}
          
          if [ $INIT_EXIT_CODE -ne 0 ]; then
            echo "::error::Terraform init failed with exit code $INIT_EXIT_CODE"
            echo "Last 50 lines of init.log:"
            tail -n 50 init.log
            exit 1
          fi
          
          echo "✅ Terraform initialization completed successfully"

      # Plan infrastructure changes
      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_stage: ${{ steps.stage.outputs.stage }}
        run: |
          # Set logging to show only errors
          export TF_LOG=ERROR
          
          echo "Running Terraform plan..."
          terraform plan -var="stage=${{ steps.stage.outputs.stage }}" -no-color -detailed-exitcode -input=false -out=tfplan 2>&1 | tee plan.log
          PLAN_EXIT_CODE=${PIPESTATUS[0]}
          
          if [ $PLAN_EXIT_CODE -eq 1 ]; then
            echo "::error::Terraform plan failed"
            echo "Last 50 lines of plan.log:"
            tail -n 50 plan.log
            exit 1
          fi
          
          echo "plan_exit_code=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
          
          if [ $PLAN_EXIT_CODE -eq 2 ]; then
            echo "📝 Terraform plan shows changes to be applied"
          else
            echo "✅ Terraform plan shows no changes needed"
          fi

      # Apply infrastructure changes
      - name: Apply Infrastructure Changes
        id: apply
        env:
          TF_VAR_stage: ${{ steps.stage.outputs.stage }}
        run: |
          # Set logging to show only errors
          export TF_LOG=ERROR
          
          echo "🚀 Applying infrastructure changes..."
          terraform apply -auto-approve tfplan 2>&1 | tee apply.log
          APPLY_EXIT_CODE=${PIPESTATUS[0]}
          
          if [ $APPLY_EXIT_CODE -ne 0 ]; then
            echo "::error::Terraform apply failed"
            echo "Last 50 lines of apply.log:"
            tail -n 50 apply.log
            exit 1
          fi
          
          echo "✅ Infrastructure changes applied successfully"

      # Get the public IP of the deployed instance
      - name: Get Instance IP
        id: get_ip
        run: |
          # Get the output and handle potential errors
          if ! OUTPUT=$(terraform output -json 2>&1); then
            echo "::error::Failed to get Terraform outputs"
            exit 1
          fi
          
          if ! INSTANCE_IP=$(echo "$OUTPUT" | jq -r '.instance_public_ip.value' 2>/dev/null); then
            echo "::error::Failed to parse instance_public_ip from Terraform output"
            echo "Available outputs:"
            echo "$OUTPUT" | jq '.'
            exit 1
          fi
          
          if [ "$INSTANCE_IP" = "null" ] || [ -z "$INSTANCE_IP" ]; then
            echo "::error::instance_public_ip not found in Terraform state"
            echo "Available outputs:"
            echo "$OUTPUT" | jq '.'
            exit 1
          fi
          
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "✅ Successfully retrieved instance IP: $INSTANCE_IP"

  # Second job: Deploy the Minecraft mod
  deploy_mod:
    needs: [terraform_deploy]  # Wait for infrastructure
    runs-on: ubuntu-latest
    steps:
      # Set up AWS credentials first
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Verify AWS credentials and SSM access
      - name: Verify AWS Access
        run: |
          echo "Verifying AWS credentials..."
          aws sts get-caller-identity
          
          echo "Testing SSM parameter access..."
          # Test access to required SSM parameters
          PARAMS=(
            "/gameserver/dev/websocket/stage_url"
            "/gameserver/dev/websocket/api_key"
            "/gameserver/dev/cognito/user_pool_id"
            "/gameserver/dev/cognito/user_pool_client_id"
          )
          
          for param in "${PARAMS[@]}"; do
            echo "Testing access to $param"
            if ! aws ssm get-parameter --name "$param" --with-decryption >/dev/null 2>&1; then
              echo "::error::Failed to access SSM parameter: $param"
              exit 1
            fi
          done
          echo "✅ Successfully verified AWS credentials and SSM access"

      # Get repository code (includes deployment scripts)
      - uses: actions/checkout@v4.1.1

      # Get mod source code
      - uses: actions/checkout@v4.1.1
        with:
          repository: LeChienCour/VoiceChatMod
          path: ./mod_source
          ref: main

      # Set up Java for mod building
      - name: Set up JDK 17
        uses: actions/setup-java@v3.13.0
        with:
          java-version: '17'
          distribution: 'temurin'

      # Build the mod
      - name: Build Mod
        id: build
        working-directory: ./mod_source
        run: |
          chmod +x ./gradlew
          ./gradlew build --no-daemon
          
          MOD_JAR=$(find build/libs -type f -name "*.jar" ! -name "*-sources.jar" ! -name "*-dev.jar" | head -n1)
          if [ -z "$MOD_JAR" ]; then
            echo "::error::No mod jar found"
            exit 1
          fi
          echo "mod_jar=$MOD_JAR" >> $GITHUB_OUTPUT

      # Deploy mod and configure server
      - name: Deploy Mod
        id: deploy
        env:
          INSTANCE_IP: ${{ needs.terraform_deploy.outputs.instance_ip }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # Make deployment script executable
          chmod +x .github/scripts/deploy.sh
          
          # Run deployment script
          .github/scripts/deploy.sh