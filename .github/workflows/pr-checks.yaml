name: Pull Request Checks

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  workflow_dispatch:

# Global minimum permissions
permissions: read-all

jobs:
  terraform_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read        # For checkout
      pull-requests: write  # For commenting results
      id-token: write      # For AWS authentication
    outputs:
      instance_ip: ${{ steps.get_ip.outputs.instance_ip }}
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: 1.12.1

      - name: Validate Required Secrets
        env:
          TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
          TF_LOCK_TABLE: ${{ secrets.TF_LOCK_TABLE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          if [ -z "$TF_STATE_BUCKET" ]; then
            echo "::error::TF_STATE_BUCKET secret is not set"
            exit 1
          fi
          if [ -z "$TF_LOCK_TABLE" ]; then
            echo "::error::TF_LOCK_TABLE secret is not set"
            exit 1
          fi
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "::error::AWS_ACCESS_KEY_ID secret is not set"
            exit 1
          fi
          if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
            echo "::error::AWS_SECRET_ACCESS_KEY secret is not set"
            exit 1
          fi
          if [ -z "$SSH_PRIVATE_KEY" ]; then
            echo "::error::SSH_PRIVATE_KEY secret is not set"
            exit 1
          fi
          echo "All required secrets are set"

      - name: Configure PR Test Environment
        id: config
        run: |
          PR_NUMBER=$(echo $GITHUB_REF | cut -d'/' -f3)
          STAGE="pr-${PR_NUMBER}"
          echo "stage=$STAGE" >> $GITHUB_OUTPUT
          echo "workspace=pr-${PR_NUMBER}" >> $GITHUB_OUTPUT  # Keep workspace for backward compatibility

      - name: Create Backend Config File
        env:
          TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
          TF_LOCK_TABLE: ${{ secrets.TF_LOCK_TABLE }}
          STAGE: ${{ steps.config.outputs.stage }}
        run: |
          cat > backend.hcl << EOF
          bucket         = "$TF_STATE_BUCKET"
          key            = "$STAGE/terraform.tfstate"
          region         = "us-east-1"
          dynamodb_table = "$TF_LOCK_TABLE"
          encrypt        = true
          EOF
          
          echo "Generated backend configuration:"
          cat backend.hcl

      - name: Terraform Init with Backend Config
        id: init
        run: |
          # Set logging to show only errors
          export TF_LOG=ERROR
          
          echo "Initializing Terraform..."
          terraform init -backend-config=backend.hcl -reconfigure -input=false 2>&1 | tee init.log
          INIT_EXIT_CODE=${PIPESTATUS[0]}
          
          if [ $INIT_EXIT_CODE -ne 0 ]; then
            echo "::error::Terraform init failed with exit code $INIT_EXIT_CODE"
            echo "Last 50 lines of init.log:"
            tail -n 50 init.log
            exit 1
          fi
          
          echo "Selecting/creating workspace..."
          if ! terraform workspace select ${{ steps.config.outputs.workspace }} 2>/dev/null; then
            echo "Creating new workspace: ${{ steps.config.outputs.workspace }}"
            terraform workspace new ${{ steps.config.outputs.workspace }}
          fi
          
          # Verify workspace
          CURRENT_WORKSPACE=$(terraform workspace show)
          if [ "$CURRENT_WORKSPACE" != "${{ steps.config.outputs.workspace }}" ]; then
            echo "::error::Failed to switch to workspace ${{ steps.config.outputs.workspace }}, current workspace is $CURRENT_WORKSPACE"
            exit 1
          fi
          
          echo "‚úÖ Terraform initialization completed successfully"

      - name: Validate Terraform Files
        run: |
          echo "Validating Terraform files..."
          terraform validate 2>&1 | tee validate.log
          VALIDATE_EXIT_CODE=${PIPESTATUS[0]}
          
          if [ $VALIDATE_EXIT_CODE -ne 0 ]; then
            echo "::error::Terraform validation failed"
            echo "Validation errors:"
            cat validate.log
            exit 1
          fi
          
          echo "‚úÖ Terraform validation successful"

      - name: Terraform Format Check
        id: fmt
        run: |
          terraform fmt -check -recursive 2>&1 | tee fmt.log
          FMT_EXIT_CODE=${PIPESTATUS[0]}
          if [ $FMT_EXIT_CODE -ne 0 ]; then
            echo "::error::Terraform format check failed. Please run 'terraform fmt -recursive' locally"
            cat fmt.log
            exit 1
          fi
          echo "‚úÖ Terraform format check passed"

      - name: Terraform Plan
        id: plan
        env:
          TF_WORKSPACE: ${{ steps.config.outputs.workspace }}  # Keep for backward compatibility
          TF_VAR_stage: ${{ steps.config.outputs.stage }}
        run: |
          # Set logging to show only errors
          export TF_LOG=ERROR
          
          echo "Running Terraform plan..."
          terraform plan -var="stage=${{ steps.config.outputs.stage }}" -no-color -detailed-exitcode -input=false -out=tfplan 2>&1 | tee plan.log
          PLAN_EXIT_CODE=${PIPESTATUS[0]}
          
          # Check plan exit code
          # Exit code 0 = No changes
          # Exit code 1 = Error
          # Exit code 2 = Changes present
          if [ $PLAN_EXIT_CODE -eq 1 ]; then
            echo "::error::Terraform plan failed"
            echo "Last 50 lines of plan.log:"
            tail -n 50 plan.log
            exit 1
          fi
          
          # Store just the exit code
          echo "plan_exit_code=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
          
          if [ $PLAN_EXIT_CODE -eq 2 ]; then
            echo "üìù Terraform plan shows changes to be applied"
          else
            echo "‚úÖ Terraform plan shows no changes needed"
          fi

      - name: Test Infrastructure Deployment
        id: apply
        if: github.event_name == 'pull_request' && steps.plan.outcome == 'success'
        env:
          TF_WORKSPACE: ${{ steps.config.outputs.workspace }}  # Keep for backward compatibility
          TF_VAR_stage: ${{ steps.config.outputs.stage }}
        run: |
          # Set logging to show only errors
          export TF_LOG=ERROR
          
          echo "üöÄ Applying test infrastructure changes..."
          terraform apply -auto-approve tfplan 2>&1 | tee apply.log
          APPLY_EXIT_CODE=${PIPESTATUS[0]}
          
          if [ $APPLY_EXIT_CODE -ne 0 ]; then
            echo "::error::Terraform apply failed"
            echo "Last 50 lines of apply.log:"
            tail -n 50 apply.log
            exit 1
          fi
          
          echo "‚úÖ Infrastructure changes applied successfully"

      - name: Get Instance IP
        id: get_ip
        run: |
          # Get the output and handle potential errors
          if ! OUTPUT=$(terraform output -json 2>&1); then
            echo "::error::Failed to get Terraform outputs"
            echo "Terraform output error: $OUTPUT"
            exit 1
          fi
          
          if ! INSTANCE_IP=$(echo "$OUTPUT" | jq -r '.instance_public_ip.value' 2>/dev/null); then
            echo "::error::Failed to parse instance_public_ip from Terraform output"
            echo "Available outputs:"
            echo "$OUTPUT" | jq '.'
            exit 1
          fi
          
          if [ "$INSTANCE_IP" = "null" ] || [ -z "$INSTANCE_IP" ]; then
            echo "::error::instance_public_ip not found in Terraform state"
            echo "Available outputs:"
            echo "$OUTPUT" | jq '.'
            exit 1
          fi
          
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "‚úÖ Successfully retrieved instance IP: $INSTANCE_IP"

      - name: Update PR with Terraform Results
        uses: actions/github-script@v7.0.1
        if: always()
        env:
          PLAN_STATUS: ${{ steps.plan.outcome }}
          APPLY_STATUS: ${{ steps.apply.outcome }}
          INSTANCE_IP: ${{ steps.get_ip.outputs.instance_ip }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = process.env.APPLY_STATUS === 'success' ? '‚úÖ' : '‚ùå';
            const output = `### Infrastructure Deployment ${status}
            
            **Resources Status:**
            - Infrastructure Apply: ${process.env.APPLY_STATUS === 'success' ? '‚úÖ Success' : '‚ùå Failed'}
            ${process.env.INSTANCE_IP ? `- Instance IP: \`${process.env.INSTANCE_IP}\`` : ''}`;
            
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: output,
              event: 'COMMENT'
            });

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  build_mod:
    needs: [terraform_deploy]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write      # For AWS authentication
    strategy:
      matrix:
        task: [instance-setup, mod-build]
    env:
      INSTANCE_IP: ${{ needs.terraform_deploy.outputs.instance_ip }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
      
      - name: Set up JDK 21
        if: matrix.task == 'mod-build'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          
      - name: Clone and Build VoiceChatMod
        if: matrix.task == 'mod-build'
        run: |
          # Clone the repository
          git clone https://github.com/LeChienCour/VoiceChatMod.git
          cd VoiceChatMod
          git checkout main
          
          # Make gradlew executable
          chmod +x ./gradlew
          
          # Verify gradlew is executable
          if [ ! -x ./gradlew ]; then
            echo "::error::Failed to make gradlew executable"
            exit 1
          fi
          
          # Build the mod
          echo "Building VoiceChatMod..."
          ./gradlew build
          
          # Verify build output
          if [ ! -d "build/libs" ] || [ -z "$(ls -A build/libs/*.jar 2>/dev/null)" ]; then
            echo "::error::No JAR files found in build/libs directory"
            exit 1
          fi
          
          echo "‚úÖ VoiceChatMod built successfully"

      - name: Upload Build Artifacts
        if: matrix.task == 'mod-build'
        uses: actions/upload-artifact@v4
        with:
          name: voicechat-mod
          path: VoiceChatMod/build/libs/*.jar
          if-no-files-found: error
          
      - name: Verify AWS Access
        if: matrix.task == 'instance-setup'
        run: |
          if ! aws sts get-caller-identity; then
            echo "::error::Failed to authenticate with AWS. Please check credentials."
            exit 1
          fi
          
      - name: Setup Instance
        if: matrix.task == 'instance-setup'
        run: |
          # Verify instance IP is set
          if [ -z "$INSTANCE_IP" ]; then
            echo "::error::INSTANCE_IP environment variable is required but not set. This should be provided from Terraform outputs."
            exit 1
          fi
          
          # Create SSH key file with proper PEM format
          mkdir -p ~/.ssh
          echo "-----BEGIN RSA PRIVATE KEY-----" > ~/.ssh/game_server_key
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | fold -w 64 >> ~/.ssh/game_server_key
          echo "-----END RSA PRIVATE KEY-----" >> ~/.ssh/game_server_key
          chmod 600 ~/.ssh/game_server_key
          
          # Copy setup script to instance
          scp -i ~/.ssh/game_server_key -o StrictHostKeyChecking=no .github/scripts/instance_setup.sh ec2-user@$INSTANCE_IP:~/setup.sh
          
          # Execute setup script on instance with AWS credentials
          ssh -i ~/.ssh/game_server_key -o StrictHostKeyChecking=no ec2-user@$INSTANCE_IP "chmod +x ~/setup.sh && sudo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} AWS_REGION=${{ env.AWS_REGION }} ~/setup.sh"
          
      - name: Copy Mod to Instance
        if: matrix.task == 'mod-build'
        run: |
          # Verify instance IP is set
          if [ -z "$INSTANCE_IP" ]; then
            echo "::error::INSTANCE_IP environment variable is required but not set. This should be provided from Terraform outputs."
            exit 1
          fi
          
          # Create SSH key file with proper PEM format
          mkdir -p ~/.ssh
          echo "-----BEGIN RSA PRIVATE KEY-----" > ~/.ssh/game_server_key
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | fold -w 64 >> ~/.ssh/game_server_key
          echo "-----END RSA PRIVATE KEY-----" >> ~/.ssh/game_server_key
          chmod 600 ~/.ssh/game_server_key
          
          # Copy the built mod to the instance
          scp -i ~/.ssh/game_server_key -o StrictHostKeyChecking=no VoiceChatMod/build/libs/*.jar ec2-user@$INSTANCE_IP:/opt/minecraft/mods/
          
          # Set correct permissions
          ssh -i ~/.ssh/game_server_key -o StrictHostKeyChecking=no ec2-user@$INSTANCE_IP "sudo chown ec2-user:ec2-user /opt/minecraft/mods/*.jar && sudo chmod 644 /opt/minecraft/mods/*.jar"

          # Get WebSocket and Cognito configuration from SSM
          WEBSOCKET_URL=$(aws ssm get-parameter --name "/minecraft/websocket-url" --with-decryption --query "Parameter.Value" --output text)
          WEBSOCKET_API_KEY=$(aws ssm get-parameter --name "/minecraft/websocket-api-key" --with-decryption --query "Parameter.Value" --output text)
          USER_POOL_ID=$(aws ssm get-parameter --name "/minecraft/user-pool-id" --with-decryption --query "Parameter.Value" --output text)
          USER_POOL_CLIENT_ID=$(aws ssm get-parameter --name "/minecraft/user-pool-client-id" --with-decryption --query "Parameter.Value" --output text)

          # Create config directory if it doesn't exist
          ssh -i ~/.ssh/game_server_key -o StrictHostKeyChecking=no ec2-user@$INSTANCE_IP "sudo mkdir -p /opt/minecraft/runs/client/config"

          # Create VoiceChatMod configuration
          ssh -i ~/.ssh/game_server_key -o StrictHostKeyChecking=no ec2-user@$INSTANCE_IP "cat > /opt/minecraft/runs/client/config/voicechatmod-common.toml << 'EOF'
          #Enable or disable the voice chat functionality globally.
          enableVoiceChat = true
          #Default voice chat volume (0.0 to 1.0). This might be overridden by client-side settings later.
          # Default: 0.7
          # Range: 0.0 ~ 1.0
          defaultVolume = 0.7
          #Maximum distance (in blocks) at which players can hear each other. Set to 0 for global chat (if server supports).
          # Default: 64
          # Range: 0 ~ 256
          maxVoiceDistance = 64
          #Number of times to attempt reconnection to the voice gateway if connection is lost.
          # Default: 3
          # Range: 0 ~ 10
          reconnectionAttempts = 3
          #Delay in seconds between reconnection attempts.
          # Default: 5
          # Range: 1 ~ 30
          reconnectionDelay = 5
          #WebSocket Gateway URL for voice chat communication
          websocketStageUrl = \"$WEBSOCKET_URL\"
          #API Key for WebSocket Gateway authentication
          websocketApiKey = \"$WEBSOCKET_API_KEY\"
          #Cognito User Pool ID for authentication
          userPoolId = \"$USER_POOL_ID\"
          #Cognito User Pool Client ID for authentication
          userPoolClientId = \"$USER_POOL_CLIENT_ID\"
          #The name of the selected microphone device. Leave empty to use system default.
          selectedMicrophone = \"\"
          #Whether to use the system default microphone instead of a specific device.
          useSystemDefaultMic = true
          #Microphone boost/gain level (1.0 is normal, increase for quiet mics).
          # Default: 1.0
          # Range: 0.1 ~ 5.0
          microphoneBoost = 1.0
          EOF"

          # Set correct permissions for the config file and directory
          ssh -i ~/.ssh/game_server_key -o StrictHostKeyChecking=no ec2-user@$INSTANCE_IP "sudo chown -R ec2-user:ec2-user /opt/minecraft/runs && sudo chmod 644 /opt/minecraft/runs/client/config/voicechatmod-common.toml"

      - name: Debug Instance IP
        run: |
          echo "Instance IP from Terraform: $INSTANCE_IP"
          if [ -z "$INSTANCE_IP" ]; then
            echo "::error::INSTANCE_IP is empty"
            exit 1
          fi

  deploy:
    needs: [build_mod]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      # Set up AWS credentials
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Get repository code
      - uses: actions/checkout@v4.1.1

      - name: Debug Instance IP
        run: |
          echo "Instance IP from Terraform: ${{ needs.terraform_deploy.outputs.instance_ip }}"
          if [ -z "${{ needs.terraform_deploy.outputs.instance_ip }}" ]; then
            echo "::error::Instance IP is empty"
            exit 1
          fi

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.terraform_deploy.outputs.instance_ip }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Restart the Minecraft server to ensure mod is loaded
            sudo systemctl restart minecraft

      # Update PR with deployment results
      - name: Update PR with Deployment Results
        if: always()
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = '${{ steps.deploy.outcome }}' === 'success' ? '‚úÖ' : '‚ùå';
            const message = '${{ steps.deploy.outputs.message }}' || 'No status message available';
            const ip = '${{ needs.terraform_deploy.outputs.instance_ip }}';
            
            let logDetails = '';
            if (status === '‚úÖ' && '${{ steps.deploy.outputs.startup_log }}') {
              const startupLog = Buffer.from('${{ steps.deploy.outputs.startup_log }}', 'base64').toString();
              logDetails = '\n\n<details><summary>Startup Log</summary>\n\n```\n' + startupLog + '\n```\n</details>';
            } else if (status === '‚ùå' && '${{ steps.deploy.outputs.error_log }}') {
              const errorLog = Buffer.from('${{ steps.deploy.outputs.error_log }}', 'base64').toString();
              logDetails = '\n\n<details><summary>Error Log</summary>\n\n```\n' + errorLog + '\n```\n</details>';
            }
            
            const comment = `### Minecraft Server Deployment ${status}
            
            **Status:** ${status} ${message}
            **Server IP:** \`${ip}\`
            ${logDetails}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  cleanup_infrastructure:
    needs: [terraform_deploy, build_mod, deploy]
    if: always() && (needs.terraform_deploy.result == 'failure' || needs.build_mod.result == 'failure' || needs.deploy.result == 'failure' || (needs.terraform_deploy.result == 'success' && needs.build_mod.result == 'success' && needs.deploy.result == 'success'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: 1.12.1

      - name: Configure PR Environment
        id: config
        run: |
          PR_NUMBER=$(echo $GITHUB_REF | cut -d'/' -f3)
          STAGE="pr-${PR_NUMBER}"
          echo "stage=$STAGE" >> $GITHUB_OUTPUT
          echo "workspace=pr-${PR_NUMBER}" >> $GITHUB_OUTPUT  # Keep workspace for backward compatibility

      - name: Create Backend Config
        env:
          TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
          TF_LOCK_TABLE: ${{ secrets.TF_LOCK_TABLE }}
          STAGE: ${{ steps.config.outputs.stage }}
        run: |
          cat > backend.hcl << EOF
          bucket         = "$TF_STATE_BUCKET"
          key            = "$STAGE/terraform.tfstate"
          region         = "us-east-1"
          dynamodb_table = "$TF_LOCK_TABLE"
          encrypt        = true
          EOF

      - name: Initialize Terraform
        run: terraform init -backend-config=backend.hcl -reconfigure

      - name: Destroy Infrastructure
        env:
          TF_WORKSPACE: ${{ steps.config.outputs.workspace }}  # Keep for backward compatibility
          TF_VAR_stage: ${{ steps.config.outputs.stage }}
        run: |
          echo "üßπ Cleaning up infrastructure..."
          terraform destroy -auto-approve -var="stage=${{ steps.config.outputs.stage }}"
          echo "‚úÖ Cleanup completed"

      - name: Delete Workspace
        if: success()
        run: |
          echo "üóëÔ∏è Deleting workspace: ${{ steps.config.outputs.workspace }}"
          terraform workspace select default
          terraform workspace delete ${{ steps.config.outputs.workspace }}

      - name: Notify Cleanup Status
        if: always()
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = '${{ job.status }}' === 'success' ? '‚úÖ' : '‚ùå';
            const message = `### Infrastructure Cleanup ${status}
            
            ${status === '‚úÖ' ? '- Resources successfully cleaned up' : '‚ö†Ô∏è Cleanup encountered issues - manual verification required'}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });