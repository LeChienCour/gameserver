name: Pull Request Checks

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, closed]

# Global minimum permissions
permissions: read-all

jobs:
  terraform_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read        # For checkout
      pull-requests: write  # For commenting results
      id-token: write      # For AWS authentication
    outputs:
      instance_ip: ${{ steps.get_ip.outputs.instance_ip }}
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: 1.12.1

      - name: Validate Required Secrets
        env:
          TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
          TF_LOCK_TABLE: ${{ secrets.TF_LOCK_TABLE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          if [ -z "$TF_STATE_BUCKET" ]; then
            echo "::error::TF_STATE_BUCKET secret is not set"
            exit 1
          fi
          if [ -z "$TF_LOCK_TABLE" ]; then
            echo "::error::TF_LOCK_TABLE secret is not set"
            exit 1
          fi
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "::error::AWS_ACCESS_KEY_ID secret is not set"
            exit 1
          fi
          if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
            echo "::error::AWS_SECRET_ACCESS_KEY secret is not set"
            exit 1
          fi
          echo "All required secrets are set"

      - name: Configure PR Test Workspace
        id: workspace
        run: |
          PR_NUMBER=$(echo $GITHUB_REF | cut -d'/' -f3)
          WORKSPACE="pr-${PR_NUMBER}"
          echo "Using workspace: $WORKSPACE"
          echo "workspace=$WORKSPACE" >> $GITHUB_OUTPUT

      - name: Create Backend Config File
        env:
          TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
          TF_LOCK_TABLE: ${{ secrets.TF_LOCK_TABLE }}
        run: |
          cat > backend.hcl << EOF
          bucket         = "$TF_STATE_BUCKET"
          key            = "pr-environments/${{ steps.workspace.outputs.workspace }}/terraform.tfstate"
          region         = "us-east-1"
          dynamodb_table = "$TF_LOCK_TABLE"
          encrypt        = true
          EOF
          
          echo "Generated backend configuration:"
          cat backend.hcl

      - name: Terraform Init with Backend Config
        id: init
        run: |
          # Set logging to show only errors
          export TF_LOG=ERROR
          
          echo "Initializing Terraform..."
          terraform init -backend-config=backend.hcl -reconfigure -input=false 2>&1 | tee init.log
          INIT_EXIT_CODE=${PIPESTATUS[0]}
          
          if [ $INIT_EXIT_CODE -ne 0 ]; then
            echo "::error::Terraform init failed with exit code $INIT_EXIT_CODE"
            echo "Last 50 lines of init.log:"
            tail -n 50 init.log
            exit 1
          fi
          
          echo "Selecting/creating workspace..."
          if ! terraform workspace select ${{ steps.workspace.outputs.workspace }} 2>/dev/null; then
            echo "Creating new workspace: ${{ steps.workspace.outputs.workspace }}"
            terraform workspace new ${{ steps.workspace.outputs.workspace }}
          fi
          
          # Verify workspace
          CURRENT_WORKSPACE=$(terraform workspace show)
          if [ "$CURRENT_WORKSPACE" != "${{ steps.workspace.outputs.workspace }}" ]; then
            echo "::error::Failed to switch to workspace ${{ steps.workspace.outputs.workspace }}, current workspace is $CURRENT_WORKSPACE"
            exit 1
          fi
          
          echo "‚úÖ Terraform initialization completed successfully"

      - name: Validate Terraform Files
        run: |
          echo "Validating Terraform files..."
          terraform validate 2>&1 | tee validate.log
          VALIDATE_EXIT_CODE=${PIPESTATUS[0]}
          
          if [ $VALIDATE_EXIT_CODE -ne 0 ]; then
            echo "::error::Terraform validation failed"
            echo "Validation errors:"
            cat validate.log
            exit 1
          fi
          
          echo "‚úÖ Terraform validation successful"

      - name: Terraform Format Check
        id: fmt
        run: |
          terraform fmt -check -recursive 2>&1 | tee fmt.log
          FMT_EXIT_CODE=${PIPESTATUS[0]}
          if [ $FMT_EXIT_CODE -ne 0 ]; then
            echo "::error::Terraform format check failed. Please run 'terraform fmt -recursive' locally"
            cat fmt.log
            exit 1
          fi
          echo "‚úÖ Terraform format check passed"

      - name: Terraform Plan
        id: plan
        env:
          TF_WORKSPACE: ${{ steps.workspace.outputs.workspace }}
        run: |
          # Set logging to show only errors
          export TF_LOG=ERROR
          
          echo "Running Terraform plan..."
          terraform plan -no-color -detailed-exitcode -input=false -out=tfplan 2>&1 | tee plan.log
          PLAN_EXIT_CODE=${PIPESTATUS[0]}
          
          # Check plan exit code
          # Exit code 0 = No changes
          # Exit code 1 = Error
          # Exit code 2 = Changes present
          if [ $PLAN_EXIT_CODE -eq 1 ]; then
            echo "::error::Terraform plan failed"
            echo "Last 50 lines of plan.log:"
            tail -n 50 plan.log
            exit 1
          fi
          
          # Store just the exit code
          echo "plan_exit_code=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
          
          if [ $PLAN_EXIT_CODE -eq 2 ]; then
            echo "üìù Terraform plan shows changes to be applied"
          else
            echo "‚úÖ Terraform plan shows no changes needed"
          fi

      - name: Test Infrastructure Deployment
        id: apply
        if: github.event_name == 'pull_request' && steps.plan.outcome == 'success'
        env:
          TF_WORKSPACE: ${{ steps.workspace.outputs.workspace }}
        run: |
          # Set logging to show only errors
          export TF_LOG=ERROR
          
          echo "üöÄ Applying test infrastructure changes in workspace: $TF_WORKSPACE"
          terraform apply -auto-approve tfplan 2>&1 | tee apply.log
          APPLY_EXIT_CODE=${PIPESTATUS[0]}
          
          if [ $APPLY_EXIT_CODE -ne 0 ]; then
            echo "::error::Terraform apply failed"
            echo "Last 50 lines of apply.log:"
            tail -n 50 apply.log
            exit 1
          fi
          
          echo "‚úÖ Infrastructure changes applied successfully"

      - name: Get Instance IP
        id: get_ip
        run: |
          # Get the output and handle potential errors
          if ! OUTPUT=$(terraform output -json 2>&1); then
            echo "::error::Failed to get Terraform outputs"
            exit 1
          fi
          
          if ! INSTANCE_IP=$(echo "$OUTPUT" | jq -r '.instance_public_ip.value' 2>/dev/null); then
            echo "::error::Failed to parse instance_public_ip from Terraform output"
            echo "Available outputs:"
            echo "$OUTPUT" | jq '.'
            exit 1
          fi
          
          if [ "$INSTANCE_IP" = "null" ] || [ -z "$INSTANCE_IP" ]; then
            echo "::error::instance_public_ip not found in Terraform state"
            echo "Available outputs:"
            echo "$OUTPUT" | jq '.'
            exit 1
          fi
          
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "‚úÖ Successfully retrieved instance IP: $INSTANCE_IP"

      - name: Get SSH Key from SSM
        id: ssh_key
        run: |
          # Get the workspace name
          WORKSPACE=$(terraform workspace show)
          echo "Using workspace: $WORKSPACE"
          
          # Try to get the SSH key with retries
          MAX_RETRIES=5
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if SSH_KEY=$(aws ssm get-parameter \
              --name "/minecraft/${WORKSPACE}/ssh_private_key" \
              --with-decryption \
              --query 'Parameter.Value' \
              --output text 2>/dev/null); then
              echo "‚úÖ Successfully retrieved SSH key from SSM"
              # Mask the key in logs
              echo "::add-mask::$SSH_KEY"
              # Store the key in environment variable
              echo "EC2_SSH_PRIVATE_KEY=$SSH_KEY" >> $GITHUB_ENV
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                echo "::error::Failed to retrieve SSH key after $MAX_RETRIES attempts"
                exit 1
              fi
              echo "Attempt $RETRY_COUNT failed, waiting 10 seconds before retry..."
              sleep 10
            fi
          done

      - name: Update PR with Terraform Results
        uses: actions/github-script@v7.0.1
        if: always()
        env:
          PLAN_STATUS: ${{ steps.plan.outcome }}
          APPLY_STATUS: ${{ steps.apply.outcome }}
          INSTANCE_IP: ${{ steps.get_ip.outputs.instance_ip }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = process.env.APPLY_STATUS === 'success' ? '‚úÖ' : '‚ùå';
            const output = `### Infrastructure Deployment ${status}
            
            **Resources Status:**
            - Infrastructure Apply: ${process.env.APPLY_STATUS === 'success' ? '‚úÖ Success' : '‚ùå Failed'}
            ${process.env.INSTANCE_IP ? `- Instance IP: \`${process.env.INSTANCE_IP}\`` : ''}`;
            
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: output,
              event: 'COMMENT'
            });

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  deploy_mod:
    needs: [terraform_deploy]
    runs-on: ubuntu-latest
    permissions:
      contents: read        # For checkout
      pull-requests: write  # For commenting results
      id-token: write      # For AWS authentication
      checks: write        # For test results
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          repository: LeChienCour/VoiceChatMod
          path: ./mod_source
          ref: main
          fetch-depth: 0

      - name: Configure PR Test Workspace
        id: workspace
        run: |
          PR_NUMBER=$(echo $GITHUB_REF | cut -d'/' -f3)
          WORKSPACE="pr-${PR_NUMBER}"
          echo "Using workspace: $WORKSPACE"
          echo "workspace=$WORKSPACE" >> $GITHUB_OUTPUT

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up JDK 17
        uses: actions/setup-java@v3.13.0
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Get SSH Key from SSM
        id: get_ssh_key
        env:
          WORKSPACE: ${{ steps.workspace.outputs.workspace }}
        run: |
          if [ -z "$WORKSPACE" ]; then
            echo "Error: Workspace variable is not set"
            exit 1
          fi
          
          echo "Retrieving SSH key for workspace: $WORKSPACE"
          SSH_KEY=$(aws ssm get-parameter \
            --name "/minecraft/${WORKSPACE}/ssh_private_key" \
            --with-decryption \
            --query 'Parameter.Value' \
            --output text)
          
          # Create temporary directory for key handling
          TEMP_KEY_DIR=$(mktemp -d)
          trap 'rm -rf "${TEMP_KEY_DIR}"' EXIT
          
          # Save key to temporary file with proper permissions
          KEY_FILE="${TEMP_KEY_DIR}/id_rsa"
          echo "$SSH_KEY" > "$KEY_FILE"
          chmod 600 "$KEY_FILE"
          
          # Verify SSH key format
          if ! ssh-keygen -l -f "$KEY_FILE" >/dev/null 2>&1; then
            echo "Error: Invalid SSH key format. Key content (first line):"
            head -n 1 "$KEY_FILE" | sed 's/\(.\{1,5\}\).*/\1.../'
            rm -rf "${TEMP_KEY_DIR}"
            exit 1
          fi
          
          # If verification passed, set the output
          echo "::add-mask::$SSH_KEY"
          {
            echo "ssh_key<<EOF"
            echo "$SSH_KEY"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          
          echo "‚úÖ SSH key validated successfully"

      - name: Build and Test Mod
        id: build
        working-directory: ./mod_source
        run: |
          chmod +x ./gradlew
          # Clean the project first
          ./gradlew clean
          
          # Build and test with specific configurations
          ./gradlew build test \
            --no-daemon \
            --parallel \
            --stacktrace \
            --warning-mode=summary \
            -Dorg.gradle.java.installations.auto-download=false \
            -Porg.gradle.java.installations.paths=/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.15-6/x64 \
            -Dorg.gradle.warning.mode=none \
            -x neoFormApplyParchment
          
          # Verify build output
          if [ -d "build/libs" ]; then
            echo "‚úÖ Build artifacts created successfully"
            echo "mod_jar=$(ls build/libs/*-all.jar | head -n1)" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Error: No build artifacts found!"
            exit 1
          fi

      - name: Create VoiceChat Config
        if: success()
        run: |
          mkdir -p VoiceChatMod/runs/client/config
          cat > VoiceChatMod/runs/client/config/voicechat-common.toml << 'EOF'
          enableVoiceChat = true
          defaultVolume = 0.7
          maxVoiceDistance = 64
          reconnectionAttempts = 3
          reconnectionDelay = 5
          websocketStageUrl = "${{ secrets.WEBSOCKET_STAGE_URL }}"
          websocketApiKey = "${{ secrets.WEBSOCKET_API_KEY }}"
          userPoolId = "${{ secrets.USER_POOL_ID }}"
          userPoolClientId = "${{ secrets.USER_POOL_CLIENT_ID }}"
          selectedMicrophone = ""
          useSystemDefaultMic = true
          microphoneBoost = 1.0
          EOF

      - name: Deploy to Server
        if: success()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.get_ip.outputs.instance_ip }}
          username: ubuntu
          key: ${{ steps.ssh_key.outputs.ssh_key }}
          port: 22
          command_timeout: "20m"
          envs: MOD_JAR_PATH
          environment: |
            MOD_JAR_PATH=${{ steps.build.outputs.mod_jar }}
          script: |
            set -e
            echo "Starting deployment..."
            
            # Setup directories
            sudo mkdir -p /opt/minecraft/server
            sudo chown -R ubuntu:ubuntu /opt/minecraft
            cd /opt/minecraft/server
            
            # Create necessary directories
            mkdir -p mods config
            
            # Download and install Minecraft + NeoForge
            echo "Downloading NeoForge..."
            wget -q https://maven.neoforged.net/releases/net/neoforged/neoforge/1.21.1/neoforge-1.21.1-installer.jar
            echo "Installing NeoForge..."
            java -jar neoforge-1.21.1-installer.jar --installServer
            
            # Accept EULA
            echo "eula=true" > eula.txt
            
            # Create server.properties
            cat > server.properties << 'EOF'
            server-port=25565
            max-players=20
            difficulty=normal
            level-name=world
            gamemode=survival
            enable-command-block=true
            motd=Test Minecraft Server
            spawn-protection=0
            EOF
            
            # Create systemd service
            sudo tee /etc/systemd/system/minecraft.service << 'EOF'
            [Unit]
            Description=Minecraft Server
            After=network.target
            
            [Service]
            WorkingDirectory=/opt/minecraft/server
            User=ubuntu
            Group=ubuntu
            
            ExecStart=/bin/sh -c 'java -Xmx2G -Xms1G @user_jvm_args.txt @libraries/net/neoforged/forge/1.21.1/unix_args.txt nogui'
            
            Restart=on-failure
            RestartSec=5
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # Copy mod and config
            echo "Copying mod file from: ${MOD_JAR_PATH}"
            cp "${MOD_JAR_PATH}" mods/
            cp -r VoiceChatMod/runs/client/config/* config/
            
            # Verify files
            echo "Verifying installation..."
            ls -la mods/
            ls -la config/
            
            # Reload systemd and start service
            echo "Starting Minecraft server..."
            sudo systemctl daemon-reload
            sudo systemctl enable minecraft.service
            sudo systemctl start minecraft.service
            
            # Check service status
            echo "Checking service status..."
            sudo systemctl status minecraft.service

      - name: Update PR with Deployment Status
        if: always()
        env:
          BUILD_OUTCOME: ${{ steps.build.outcome }}
          DEPLOY_OUTCOME: ${{ steps.deploy.outcome }}
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const buildStatus = process.env.BUILD_OUTCOME == 'success' ? '‚úÖ' : '‚ùå';
            const deployStatus = process.env.DEPLOY_OUTCOME == 'success' ? '‚úÖ' : '‚ùå';
            const output = `### Mod Deployment Status ${buildStatus}
            
            **Steps:**
            - Build and Test: ${buildStatus}
            - Server Configuration: ${deployStatus}
            
            ${buildStatus == '‚úÖ' ? '‚úÖ Mod successfully deployed to server' : '‚ùå Deployment failed - check workflow logs for details'}`;
            
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: output,
              event: 'COMMENT'
            });

  cleanup_infrastructure:
    needs: [terraform_deploy, deploy_mod]
    if: |
      always() && 
      (
        github.event.action == 'closed' || 
        needs.terraform_deploy.result == 'failure' ||
        needs.deploy_mod.result == 'failure'
      )
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: 1.12.1

      - name: Get Workspace Name
        id: workspace
        run: |
          PR_NUMBER=$(echo $GITHUB_REF | cut -d'/' -f3)
          WORKSPACE="pr-${PR_NUMBER}"
          echo "workspace=$WORKSPACE" >> $GITHUB_OUTPUT

      - name: Terraform Init with Backend Config
        run: |
          # Create backend config
          cat > backend.hcl << EOF
          bucket         = "${{ secrets.TF_STATE_BUCKET }}"
          key            = "pr-environments/${{ steps.workspace.outputs.workspace }}/terraform.tfstate"
          region         = "us-east-1"
          dynamodb_table = "${{ secrets.TF_LOCK_TABLE }}"
          encrypt        = true
          use_lockfile   = true
          EOF

          # Initialize with backend configuration
          terraform init -backend-config=backend.hcl -reconfigure

          # Select workspace
          terraform workspace select ${{ steps.workspace.outputs.workspace }}

      - name: Destroy Infrastructure
        env:
          TF_WORKSPACE: ${{ steps.workspace.outputs.workspace }}
        run: |
          echo "üßπ Cleaning up infrastructure in workspace: $TF_WORKSPACE"
          terraform destroy -auto-approve
          echo "‚úÖ Cleanup completed"

      - name: Delete Workspace
        if: success()
        run: |
          echo "üóëÔ∏è Deleting workspace: ${{ steps.workspace.outputs.workspace }}"
          terraform workspace select default
          terraform workspace delete ${{ steps.workspace.outputs.workspace }}

      - name: Notify Cleanup Status
        if: always()
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = '${{ job.status }}' === 'success' ? '‚úÖ' : '‚ùå';
            const message = `### Infrastructure Cleanup ${status}
            
            ${status === '‚úÖ' ? '- Resources successfully cleaned up' : '‚ö†Ô∏è Cleanup encountered issues - manual verification required'}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });